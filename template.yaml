AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    acm-expenses
    
    keep track of all acm expenses 

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
    Function:
        Timeout: 5
        AutoPublishAlias: live # More info about Safe Deployments: https://github.com/awslabs/serverless-application-model/blob/master/docs/safe_lambda_deployments.rst
        DeploymentPreference:
            Type: Linear10PercentEvery1Minute 


Resources:

    ExpenseFunction:
        Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
        Properties:
            CodeUri: ./first_function # .aws-sam/build/template.yaml  # first_function/build/
            Handler: app.lambda_handler
            Runtime: python3.7 # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
            Environment:
                Variables:
                    TABLE_NAME: !Ref DynamoDBTable
            Events:
                Post:
                    Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
                    Properties:
                        Path: /reimburse
                        Method: POST
                        RestApiId: !Ref ExpenseApi

            Policies:
                - AWSLambdaVPCAccessExecutionRole
                - AmazonDynamoDBFullAccess
                - Version: '2012-10-17'
                  Statement:
                      - Sid: Stmt1467321765000
                        Effect: Allow
                        Action:
                            - apigateway:*
                        Resource:
                             - "*"

    ApiGatewayInvokeLambdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt
                - ExpenseFunction
                - Arn
            Principal: apigateway.amazonaws.com
            SourceArn: !Join [
                "", [
                "arn:aws:execute-api:",
                {"Ref": "AWS::Region"}, ":",
                {"Ref": "AWS::AccountId"}, ":",
                !Ref ExpenseApi, "/*/*/*"
      ]
      ]

    ExpenseApi:
        Type: AWS::Serverless::Api
        Properties:
            StageName: stage1
            EndpointConfiguration: REGIONAL
            Cors:
                AllowOrigin: "'http://umabahl.com'"
            DefinitionBody:
                openapi: 3.0.0
                info:
                    version: "1.0.0"
                    title: "Expense API"
                paths:
                    /reimburse:
                        post:
                            description: Puts in the reimbursement request
                            requestBody:
                                description: the reimbursement details
                                required: true
                                content:
                                    application/x-www-form-urlencoded:
                                        schema:
                                            type: object
                                            properties:
                                                event:
                                                    type: string
                                                person:
                                                    type: string
                                                dateOfPurchase:
                                                    type: string
                                                totalAmount:
                                                    type: string
                                                description:
                                                    type: string
                                                other:
                                                    type: string
                                            required:
                                                - event
                                                - person
                                                - dateOfPurchase
                                                - totalAmount
                                                - description

                            responses:
                                '200':
                                    description: Returns the result from Comprehend
                                    content:
                                        application/json:
                                            schema:
                                                type: object
                                                properties:
                                                    body:
                                                        type: string
                                                    headers:
                                                        type: string
                                                        example: {'header':'value'}
                                                    statusCode:
                                                        type: integer
                                                    isBase64Encoded:
                                                        type: boolean
                                '400':
                                    description: Invalid characters in "user" were provided.
                            x-amazon-apigateway-integration:
                                responses:
                                    default:
                                        statusCode: 200
                                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ExpenseFunction.Arn}/invocations"
                                passthroughBehavior: when_no_match
                                httpMethod: POST
                                type: aws_proxy
#                        options:
#                            summary: CORS support
#                            x-amazon-apigateway-integration:
#                                type: mock
#                                requestTemplates:
#                                    application/json: "{\n  \"statusCode\" : 200\n}\n"
#                                responses:
#                                    default:
#                                        statusCode: '200'
#                                        responseTemplates:
#                                            application/json: "{}\n"
#                                        responseParameters:
#                                            method.response.header.Access-Control-Allow-Origin: http://umabahl.com
#                                            method.response.header.Access-Control-Allow-Methods:
#                                                - OPTIONS
#                                                - POST
#                                            method.response.header.Access-Control-Allow-Headers:
#                                                - Content-Type
#                                                - X-Amz-Date
#                                                - Authorization
#                                                - X-Api-Key
#                                                - X-Amz-Security-Token
#                            responses:
#                                '200':
#                                    description: Default response for CORS method
#                                    headers:
#                                        Access-Control-Allow-Origin:
#                                            schema:
#                                                type: string
#                                        Access-Control-Allow-Headers:
#                                            schema:
#                                                type: string
#                                        Access-Control-Allow-Methods:
#                                            schema:
#                                                type: string
    DynamoDBTable:
        Type: AWS::DynamoDB::Table
        Properties:
            AttributeDefinitions:
                - AttributeName: "ReimbursementSeeker"
                  AttributeType: "S"
                - AttributeName: "DateAdded"
                  AttributeType: "S"
            KeySchema:
                - AttributeName: "ReimbursementSeeker"
                  KeyType: "HASH"
                - AttributeName: "DateAdded"
                  KeyType: "RANGE"
            ProvisionedThroughput:
                ReadCapacityUnits: "10"
                WriteCapacityUnits: "10"


